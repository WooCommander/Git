https://proglib.io/p/git-github-gitflow/

Создание репозитория в существующей директории
1.	Для начала, убедитесь, что у вас установлен Git.
2.	Создайте папку с именем test_git (d:, md test_git)
3.	Заходим в созданный каталог (cd test_git) и выполняем git init.
4.	Давайте создадим простой readme.md файл (copy con readme.md)

	# Proglib
	Hello, readme please

	После ввода текст нажмите Ctrl+z а потом Enter
5.	Выполните команду git status. Она показывает информацию о статусе проекта в git.
	Пока наш файл не отслеживается.
6. 	Добавим файл под версионный контроль. git add readme.md  || git add . (для всех файлов)
7. 	Выполните команду git status. Теперь в системе появился новый файл, который мы только что добавили. Файл готов к добавлению в локальный репзиторий.
8.  	Фиксируем изменения в локальный репозиторий. git commit -m "Added the readme.md file»
	Пишите вразумительные и ясные комментарии.

Клонирование существующего репозитория
1. 	git clone https://github.com/WooCommander/Repository.git 
	где https://github.com/WooCommander/Repository.git - любой существующий репозиторий. Эта команда создаёт директорию "Repository", инициализирует в ней поддиректорию .git, скачивает все данные для этого репозитория и создаёт (checks out) рабочую копию последней версии.
	git clone https://github.com/WooCommander/Repository.git mygit
	Эта команда делает всё то же самое, что и предыдущая, только результирующий каталог будет назван mygit






 	Удаленный репозиторий. 
1. 	Создайте аккаунт на GitGub
2.	Создайте новый публичный репозиторий например(test)
3. 	Так как мы только что создали репозиторий, будем использовать вариант …or push an existing.
	
	git remote add origin https://github.com/WooCommander/test.git (вместо WooCommander будет ваше имя)
	
	переносим данные из локального репозитория в удаленный
	git push -u origin master

	После выполнения команд, можно через браузер убедиться что данные попали в удаленный репозиторий

	Ветки	
1. 	Создадим ветку, выполнив в консоли git checkout -b new_feature.
2. 	Внесем изменения в файл readme.md
3.	Выполним следующие команды
	
	Добавим все изменения в локальный репозиторий
	git add .
	Фиксируем изменения в локальном репозитории
	git commit -m "New feature changes"
	
	Переключаемся на ветку master
	git checkout master
	
	Объеденяем ее с веткой new_feature
	git merge new_feature
	



	Gitflow
	
	Вот как в теории, происходит рабочий процесс в Gitflow:

1. 	Создается репозиторий
2. 	Репозиторий инициализируется
3. 	Начинается работа на ветке develop
4. 	Возникает необходимость опробовать новую штуку – создается feature-ветка и делаются коммиты
5. 	Закончив работу на feature-ветке, вы сливаете ее с develop
6. 	Если вы довольны текущей версией, но хотите продолжить работу, создается ветка release, куда перемещается текущая версия. Правка багов будет происходить на этой же ветке.
7. 	Когда с веткой release покончено, время слить ее в master и продолжить работу с develop
8. 	Кроме того, этот момент можно отметить на master-ветке


git flow init
